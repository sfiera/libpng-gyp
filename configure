#!/usr/bin/env python3

from __future__ import division, print_function, unicode_literals

import argparse
import collections
import glob
import os
import platform
import shlex
import subprocess
import sys

sys.path[0:0] = [
    os.path.join(os.path.dirname(__file__), "build", "lib", "scripts"),
]
try:
    import cfg
except ImportError:
    pass


def main():
    config_dir = os.path.dirname(sys.argv[0])
    if config_dir != "":
        os.chdir(config_dir)
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument(
        "-m",
        "--mode",
        metavar="MODE",
        type=str,
        choices="dbg dev opt".split(),
        default="opt",
        help="set build configuration:\n"
        "  - opt: compile for fast binaries (default)\n"
        "  - dev: compile for fast builds\n"
        "  - dbg: add debugging symbols",
    )
    parser.add_argument(
        "-o", "--target-os", metavar="OS", type=str, help="target os (default: host os)"
    )
    args = parser.parse_args()

    check_submodules()
    config = check_deps(args)

    script_executable = "python3"
    if cfg.host_os() == "win":
        script_executable = "python"

    with open(".gn", "w") as gnf:
        gnf.write('buildconfig = "//build/BUILDCONFIG.gn"\n')
        gnf.write('script_executable = "' + script_executable + '"\n')

    with cfg.step("configure mode") as msg:
        msg(args.mode, color="green")

    config["mode"] = args.mode
    config["target_os"] = args.target_os
    config["add_cflags"] = shlex.split(os.environ.get("CPPFLAGS", ""))
    config["add_cflags_c"] = shlex.split(os.environ.get("CFLAGS", ""))
    config["add_cflags_cc"] = shlex.split(os.environ.get("CXXFLAGS", ""))
    config["add_ldflags"] = shlex.split(os.environ.get("LDFLAGS", ""))
    cfg.gn(**config)

    print("make(1) it so!")


def check_submodules():
    if not os.path.exists(os.path.join("build/lib", ".git")):
        print("The build submodule is missing. Run:")
        print("  $ git submodule update --init")
        sys.exit(1)


def check_deps(args):
    with cfg.step("checking host os") as msg:
        if cfg.host_os() in ["mac", "linux", "win"]:
            msg(cfg.host_os(), color="green")
        else:
            msg(cfg.host_os(), color="red")
            print("\nSorry! This repo requires macOS, Linux, or Windows")
            sys.exit(1)

    with cfg.step("checking target os") as msg:
        if args.target_os is None:
            args.target_os = cfg.host_os()
        checker = {
            ("mac", "mac"): check_mac,
            ("linux", "linux"): check_linux_native,
            ("win", "win"): check_win_native,
        }.get((cfg.host_os(), args.target_os))
        if checker is None:
            msg(args.target_os, color="red")
            sys.exit(1)
        msg(args.target_os, color="green")

    return checker(args)


def check_mac(args):
    with cfg.step("checking Mac OS X version") as msg:
        ver = platform.mac_ver()[0]
        ver = tuple(int(x) for x in ver.split(".")[:2])
        if ver < (10, 9):
            msg("%d.%d" % ver, color="red")
            print("\nSorry! This repo requires Mac OS X 10.9+")
            sys.exit(1)
        msg("%d.%d" % ver, color="green")

    missing = collections.OrderedDict()
    if not (cfg.check_clang() and cfg.check_libcxx()):
        missing["xcode"] = (
            "* To install Xcode, open the App Store:\n"
            "    https://itunes.apple.com/en/app/xcode/id497799835\n"
            "  After installing, open it and accept the license agreement\n"
        )

    if missing:
        print("\nmissing dependencies: %s\n" % " ".join(missing.keys()))
        for step in missing.values():
            sys.stdout.write(step)
        if any("Homebrew" in v for v in missing.values()):
            print("* Homebrew can be installed like so:")
            print(
                '    $ ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"'
            )
        sys.exit(1)

    return {"gn": "gn", "ninja": "ninja"}


def check_linux_native(args):
    with cfg.step("checking Linux distro") as msg:
        distro = platform.linux_distribution()
        if distro[0] == "Ubuntu":
            msg(" ".join(distro), color="green")
        else:
            msg(" ".join(distro) + " (untested)", color="yellow")

    missing = collections.OrderedDict()
    if not cfg.check_clang("clang++"):
        missing["clang"] = "clang"

    if missing:
        print("\nmissing dependencies: %s" % " ".join(missing.keys()))
        if len(missing) == 1:
            print("\nOn Ubuntu, you can install it with:\n")
        else:
            print("\nOn Ubuntu, you can install them with:\n")
        print("    $ sudo apt-get install %s" % (" ".join(missing.values())))
        sys.exit(1)

    return {"gn": "gn", "ninja": "ninja"}


def check_win_native(args):
    return {"gn": "gn", "ninja": "ninja"}


if __name__ == "__main__":
    main()
